# installing python dependencies, node_modules and running unittests
# For mor information see:
# - https://docs.github.com/en/actions
# - https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions
# - https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows
# - https://github.com/actions/cache

# Name of the action
name: Summer

# This specifies that the action should be executed whenever something is pushed to the
# main branch or when a pull requested directed to the main branch is made.
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Specifies which jobs to be executed in the given action/workflow
jobs:
  build:

    # Specifies the virtual machine (runner) been reflected. In this case an ubuntu machine
    # which is hosted by GitHub
    runs-on: ubuntu-latest

    # Essentially just groups the following actions or shell scripts.
    steps:

    # Specifies which version of action/checkout you will be using (in this case v3). 
    # This tells the runner to check out the repository allowing us to run srcipts/other actions
    # against the code in our repository. You want to use this whenever you want your workflow
    # will run against the repository's code
    - uses: actions/checkout@v3

    # Ensutre that we have python installed on our virtual machine
    - name: Setup python 3.10
      
      # Use setup action for python
      uses: actions/setup-python@v3

      with:

        # Specify version
        python-version: "3.10"
    
    # Now we want to cache our node modules, so we dont have to run npm install everytime the
    # workflow runs. Give it a name so it shows in the workflow, when you run it.
    #- name: Cache our node modules
      
      # Giving an id, so we can use it to check cache hit/miss later
    #  id: nodecache

      # Specifies that we want to use the cache action in this step
    #  uses: actions/cache@v3
      
    #  with:
      
        # Specifies the path to the files we want to cache and restore. (in this case node_modules)
    #    path: |
    #      **/node_modules

        # Specifies the given key we want to store our cache with
    #    key: ${{ runner.os }}-node-${{ hashfilles('**/package-lock.json')}}

        # Specifies keys we are able to restore our cache with. Priotized order top to bottom.
    #    restore-keys: |
    #      ${{ runner.os }}-node-
    #      ${{ runner.os }}
    
    # Setting up node js so we can use npm
    - name: Setup of NodeJS

      # Specifies that we want to use the action that sets up node js
      uses: action/setup-node@v3
      
      with:

        # Specifying the node version we want to use
        node-version: "16"

    # Run npm install on our virtual machine
    - name: Run npm install

      # Check if node modules already exits in cache, if run commands
      if: steps.nodecache.outputs.cache-hit != 'true'
      
      # Execute following commands
      run: |
        cd ./src/frontend
        npm install
        cd ../../

    # Run our unittests  
    - name: Run unittest
      
      # Execute following commands
      run: |
        python -m unittest discover

